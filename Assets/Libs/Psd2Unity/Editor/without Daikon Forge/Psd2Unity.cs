using System;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;
using UnityEditorInternal;

using Object = UnityEngine.Object;

public class Psd2Unity : EditorWindow {

    public const string NAME = "Psd2Unity";

    private static string structureSuffix    = "-structure";
    private static string assetsFolderSuffix = "-assets";

    private static Object structureObject;
    private static Object baseAssetObject;
    private static string baseAssetPath;

    private static string[] pivotOptions = new string[] {
        "Center",
        "Top Left",
        "Top",
        "Top Right",
        "Left",
        "Right",
        "Bottom Left",
        "Bottom",
        "Bottom Right"
    };
    private static SpriteAlignment[] pivotByIndex_unity2d = new SpriteAlignment[] {
        SpriteAlignment.Center,
        SpriteAlignment.TopLeft,
        SpriteAlignment.TopCenter,
        SpriteAlignment.TopRight,
        SpriteAlignment.LeftCenter,
        SpriteAlignment.RightCenter,
        SpriteAlignment.BottomLeft,
        SpriteAlignment.BottomCenter,
        SpriteAlignment.BottomRight
    };

    private static Dictionary<string, object> setting = new Dictionary<string, object> {
        { "expanded", true },

        { "nestLayers", true },

        { "sortingLayerIndex", 0 },
        { "sortingLayerName", null },
        { "useOrderInLayer", true },
        { "zMultiplier", 0f },

        { "pixelsToUnits", 1f },
        { "scale", 1f },
        { "pivotIndex", 0 },
        { "pivot", null }
    };

    [MenuItem("Window/" + NAME)]
    static void OpenWindow () {
        Psd2Unity window = (Psd2Unity)EditorWindow.GetWindow(typeof(Psd2Unity));
        window.Show();
    }

    void OnGUI () {
        GUILayout.Label("Target", EditorStyles.boldLabel);
        structureObject = EditorGUILayout.ObjectField("Structure File", structureObject, typeof(Object), false);
        baseAssetObject = EditorGUILayout.ObjectField("Assets Folder", baseAssetObject, typeof(Object), false);

        EditorGUILayout.Space();

        if (GUILayout.Button("Compose!", GUILayout.Height(30))) {
            Compose();
        }

        EditorGUILayout.Space();

        setting["expanded"] = EditorGUILayout.Foldout((bool)setting["expanded"], "Optional Settings");

        if ((bool)setting["expanded"]) {
            setting["nestLayers"] = EditorGUILayout.Toggle("Nest Layers", (bool)setting["nestLayers"]);

            EditorGUILayout.Space();

            setting["useOrderInLayer"]   = EditorGUILayout.Toggle("Use Order In Layer", (bool)setting["useOrderInLayer"]);
            string[] sortingLayerOptions = GetSortingLayerNames();
            setting["sortingLayerIndex"] = EditorGUILayout.Popup("Sorting Layer", (int)setting["sortingLayerIndex"], sortingLayerOptions);
            setting["sortingLayerName"]  = sortingLayerOptions[(int)setting["sortingLayerIndex"]];
            setting["zMultiplier"]       = EditorGUILayout.FloatField("Z Multiplier", (float)setting["zMultiplier"]);

            EditorGUILayout.Space();

            setting["pixelsToUnits"] = EditorGUILayout.FloatField("Pixels To Units", (float)setting["pixelsToUnits"]);
            setting["scale"]         = EditorGUILayout.FloatField("Scale", (float)setting["scale"]);
            setting["pivotIndex"]    = EditorGUILayout.Popup("Pivot", (int)setting["pivotIndex"], pivotOptions);
            setting["pivot"]         = pivotByIndex_unity2d[(int)setting["pivotIndex"]];
        }
    }

    private static string[] GetSortingLayerNames() {
        System.Type internalEditorUtilityType = typeof(InternalEditorUtility);
        PropertyInfo sortingLayersProperty = internalEditorUtilityType.GetProperty("sortingLayerNames", BindingFlags.Static | BindingFlags.NonPublic);
        return (string[])sortingLayersProperty.GetValue(null, new object[0]);
    }

    [MenuItem("Assets/Set as " + NAME + "'s Target")]
    static void SetStructureObject () {
        structureObject = Selection.activeObject;

        string structurePath = AssetDatabase.GetAssetPath(structureObject);
        string baseAssetPath = Regex.Replace(structurePath, structureSuffix + "$", assetsFolderSuffix);
        baseAssetObject      = AssetDatabase.LoadAssetAtPath(baseAssetPath, typeof(Object));

        OpenWindow();
    }

    static void Compose () {
        if (! structureObject) {
            EditorUtility.DisplayDialog(
                "Warning",
                "Please select a structure file generated by " + NAME + " to continue.",
                "OK"
            );
            return;
        }
        if (! baseAssetObject) {
            EditorUtility.DisplayDialog(
                "Warning",
                "Please select assets folder generated by " + NAME + " to continue.",
                "OK"
            );
            return;
        }

        baseAssetPath = AssetDatabase.GetAssetPath(baseAssetObject);

        string dataPath          = Application.dataPath;
        string structurePath     = AssetDatabase.GetAssetPath(structureObject);
        string structureFilePath = dataPath.Substring(0, dataPath.Length - 6) + structurePath;
        PsdNode structure        = ReadStructure(structureFilePath);

        string rootName = Regex.Replace(structurePath, "^.*?([^/]+?)" + structureSuffix + "$", "$1");

        Unity2DProcessor processor = new Unity2DProcessor(baseAssetPath, setting);
        processor.process(structure, rootName);
    }

    private static PsdNode ReadStructure (string filePath) {
        PsdNode ret = new PsdNode();

        StreamReader fs = new StreamReader(filePath);
        string line;

        List<PsdNode> parents = new List<PsdNode>();
        PsdNode ele = new PsdNode();

        while((line = fs.ReadLine()) != null) {
            line = line.Trim();

            try {
                if (line == "{") {
                    parents.Add(ele);
                }
                else if (line == "}") {
                    parents.RemoveAt(parents.Count - 1);
                }
                else {
                    ele = new PsdNode();

                    string[] parts = line.Split('|');

                    ele.name = parts[0];

                    if (parts.Length > 1) {
                        ele.fileName = parts[1];

                        string[] offset = parts[2].Split(',');
                        string[] size   = parts[3].Split(',');

                        ele.left   = float.Parse(offset[0]);
                        ele.top    = float.Parse(offset[1]);
                        ele.width  = float.Parse(size[0]);
                        ele.height = float.Parse(size[1]);
                    }

                    if (parents.Count > 0) {
                        PsdNode parent = parents[parents.Count - 1];
                        parent.children.Push(ele);
                    }
                    else {
                        ret.children.Push(ele);
                    }
                }
            }
            catch {
                EditorUtility.DisplayDialog(
                    "Error",
                    "Failed loading structure at \n" + filePath + "\n"
                    + "Make sure this is the right file generated by " + NAME + ".",
                    "OK"
                );
                return new PsdNode();
            }
        }

        fs.Close();

        return ret;
    }
}
